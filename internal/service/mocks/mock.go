// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"
	"github.com/ikotiki/go-rest-api-service-subscriptions"
	"github.com/ikotiki/go-rest-api-service-subscriptions/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscriptions creates a new instance of MockSubscriptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptions {
	mock := &MockSubscriptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriptions is an autogenerated mock type for the Subscriptions type
type MockSubscriptions struct {
	mock.Mock
}

type MockSubscriptions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptions) EXPECT() *MockSubscriptions_Expecter {
	return &MockSubscriptions_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockSubscriptions
func (_mock *MockSubscriptions) Create(ctx context.Context, sub *microservice.Subscription) (microservice.SubscriptionID, error) {
	ret := _mock.Called(ctx, sub)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 microservice.SubscriptionID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *microservice.Subscription) (microservice.SubscriptionID, error)); ok {
		return returnFunc(ctx, sub)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *microservice.Subscription) microservice.SubscriptionID); ok {
		r0 = returnFunc(ctx, sub)
	} else {
		r0 = ret.Get(0).(microservice.SubscriptionID)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *microservice.Subscription) error); ok {
		r1 = returnFunc(ctx, sub)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptions_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSubscriptions_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - sub *microservice.Subscription
func (_e *MockSubscriptions_Expecter) Create(ctx interface{}, sub interface{}) *MockSubscriptions_Create_Call {
	return &MockSubscriptions_Create_Call{Call: _e.mock.On("Create", ctx, sub)}
}

func (_c *MockSubscriptions_Create_Call) Run(run func(ctx context.Context, sub *microservice.Subscription)) *MockSubscriptions_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *microservice.Subscription
		if args[1] != nil {
			arg1 = args[1].(*microservice.Subscription)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptions_Create_Call) Return(id microservice.SubscriptionID, err error) *MockSubscriptions_Create_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockSubscriptions_Create_Call) RunAndReturn(run func(ctx context.Context, sub *microservice.Subscription) (microservice.SubscriptionID, error)) *MockSubscriptions_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function for the type MockSubscriptions
func (_mock *MockSubscriptions) DeleteByID(ctx context.Context, id microservice.SubscriptionID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, microservice.SubscriptionID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptions_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockSubscriptions_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id microservice.SubscriptionID
func (_e *MockSubscriptions_Expecter) DeleteByID(ctx interface{}, id interface{}) *MockSubscriptions_DeleteByID_Call {
	return &MockSubscriptions_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ctx, id)}
}

func (_c *MockSubscriptions_DeleteByID_Call) Run(run func(ctx context.Context, id microservice.SubscriptionID)) *MockSubscriptions_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 microservice.SubscriptionID
		if args[1] != nil {
			arg1 = args[1].(microservice.SubscriptionID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptions_DeleteByID_Call) Return(err error) *MockSubscriptions_DeleteByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptions_DeleteByID_Call) RunAndReturn(run func(ctx context.Context, id microservice.SubscriptionID) error) *MockSubscriptions_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockSubscriptions
func (_mock *MockSubscriptions) GetByID(ctx context.Context, id microservice.SubscriptionID) (*microservice.Subscription, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *microservice.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, microservice.SubscriptionID) (*microservice.Subscription, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, microservice.SubscriptionID) *microservice.Subscription); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microservice.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, microservice.SubscriptionID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptions_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockSubscriptions_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id microservice.SubscriptionID
func (_e *MockSubscriptions_Expecter) GetByID(ctx interface{}, id interface{}) *MockSubscriptions_GetByID_Call {
	return &MockSubscriptions_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockSubscriptions_GetByID_Call) Run(run func(ctx context.Context, id microservice.SubscriptionID)) *MockSubscriptions_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 microservice.SubscriptionID
		if args[1] != nil {
			arg1 = args[1].(microservice.SubscriptionID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptions_GetByID_Call) Return(sub *microservice.Subscription, err error) *MockSubscriptions_GetByID_Call {
	_c.Call.Return(sub, err)
	return _c
}

func (_c *MockSubscriptions_GetByID_Call) RunAndReturn(run func(ctx context.Context, id microservice.SubscriptionID) (*microservice.Subscription, error)) *MockSubscriptions_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockSubscriptions
func (_mock *MockSubscriptions) Query(ctx context.Context, args *service.SubscriptionQueryArgs) ([]*microservice.Subscription, error) {
	ret := _mock.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []*microservice.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *service.SubscriptionQueryArgs) ([]*microservice.Subscription, error)); ok {
		return returnFunc(ctx, args)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *service.SubscriptionQueryArgs) []*microservice.Subscription); ok {
		r0 = returnFunc(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*microservice.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *service.SubscriptionQueryArgs) error); ok {
		r1 = returnFunc(ctx, args)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptions_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockSubscriptions_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - args *service.SubscriptionQueryArgs
func (_e *MockSubscriptions_Expecter) Query(ctx interface{}, args interface{}) *MockSubscriptions_Query_Call {
	return &MockSubscriptions_Query_Call{Call: _e.mock.On("Query", ctx, args)}
}

func (_c *MockSubscriptions_Query_Call) Run(run func(ctx context.Context, args *service.SubscriptionQueryArgs)) *MockSubscriptions_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *service.SubscriptionQueryArgs
		if args[1] != nil {
			arg1 = args[1].(*service.SubscriptionQueryArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptions_Query_Call) Return(subs []*microservice.Subscription, err error) *MockSubscriptions_Query_Call {
	_c.Call.Return(subs, err)
	return _c
}

func (_c *MockSubscriptions_Query_Call) RunAndReturn(run func(ctx context.Context, args *service.SubscriptionQueryArgs) ([]*microservice.Subscription, error)) *MockSubscriptions_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Sum provides a mock function for the type MockSubscriptions
func (_mock *MockSubscriptions) Sum(ctx context.Context, args *service.SubscriptionQueryArgs) (microservice.Price, error) {
	ret := _mock.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for Sum")
	}

	var r0 microservice.Price
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *service.SubscriptionQueryArgs) (microservice.Price, error)); ok {
		return returnFunc(ctx, args)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *service.SubscriptionQueryArgs) microservice.Price); ok {
		r0 = returnFunc(ctx, args)
	} else {
		r0 = ret.Get(0).(microservice.Price)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *service.SubscriptionQueryArgs) error); ok {
		r1 = returnFunc(ctx, args)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptions_Sum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sum'
type MockSubscriptions_Sum_Call struct {
	*mock.Call
}

// Sum is a helper method to define mock.On call
//   - ctx context.Context
//   - args *service.SubscriptionQueryArgs
func (_e *MockSubscriptions_Expecter) Sum(ctx interface{}, args interface{}) *MockSubscriptions_Sum_Call {
	return &MockSubscriptions_Sum_Call{Call: _e.mock.On("Sum", ctx, args)}
}

func (_c *MockSubscriptions_Sum_Call) Run(run func(ctx context.Context, args *service.SubscriptionQueryArgs)) *MockSubscriptions_Sum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *service.SubscriptionQueryArgs
		if args[1] != nil {
			arg1 = args[1].(*service.SubscriptionQueryArgs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptions_Sum_Call) Return(sum microservice.Price, err error) *MockSubscriptions_Sum_Call {
	_c.Call.Return(sum, err)
	return _c
}

func (_c *MockSubscriptions_Sum_Call) RunAndReturn(run func(ctx context.Context, args *service.SubscriptionQueryArgs) (microservice.Price, error)) *MockSubscriptions_Sum_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSubscriptions
func (_mock *MockSubscriptions) Update(ctx context.Context, sub *microservice.Subscription) error {
	ret := _mock.Called(ctx, sub)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *microservice.Subscription) error); ok {
		r0 = returnFunc(ctx, sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptions_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSubscriptions_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - sub *microservice.Subscription
func (_e *MockSubscriptions_Expecter) Update(ctx interface{}, sub interface{}) *MockSubscriptions_Update_Call {
	return &MockSubscriptions_Update_Call{Call: _e.mock.On("Update", ctx, sub)}
}

func (_c *MockSubscriptions_Update_Call) Run(run func(ctx context.Context, sub *microservice.Subscription)) *MockSubscriptions_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *microservice.Subscription
		if args[1] != nil {
			arg1 = args[1].(*microservice.Subscription)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptions_Update_Call) Return(err error) *MockSubscriptions_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptions_Update_Call) RunAndReturn(run func(ctx context.Context, sub *microservice.Subscription) error) *MockSubscriptions_Update_Call {
	_c.Call.Return(run)
	return _c
}
